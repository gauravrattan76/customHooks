Infinity scroll working code -

import React, { useEffect, useRef, useState } from 'react';

const InfiniteScrollWithPagination = () => {
  const [items, setItems] = useState([]); // Stores the loaded items
  const [page, setPage] = useState(1); // Tracks the current page
  const [hasMore, setHasMore] = useState(true); // Indicates if more data is available
  const [loading, setLoading] = useState(false); // Indicates if data is currently being loaded
  const loaderRef = useRef(null); // Ref for the loader div

  // Function to fetch data
  const fetchItems = async (pageNumber) => {
    setLoading(true);
    try {
      // Replace the URL below with your actual API endpoint
      const response = await fetch(`https://jsonplaceholder.typicode.com/posts?_page=${pageNumber}&_limit=30`);
      const data = await response.json();

      // If no data is returned, we've reached the end
      if (data.length === 0) {
        setHasMore(false);
      } else {
        setItems((prevItems) => [...prevItems, ...data]);
      }
    } catch (error) {
      console.error('Error fetching data:', error);
    }
    setLoading(false);
  };

  useEffect(() => {
    // Initial fetch
    fetchItems(page);
  }, [page]);

  useEffect(() => {
    // Set up the Intersection Observer
    const observer = new IntersectionObserver(
      (entries) => {
        const target = entries[0];
        if (target.isIntersecting && hasMore && !loading) {
          setPage((prevPage) => prevPage + 1);
        }
      },
      {
        root: null,
        rootMargin: '20px',
        threshold: 1.0,
      }
    );

    const currentLoader = loaderRef.current;
    if (currentLoader) {
      observer.observe(currentLoader);
    }

    // Cleanup the observer on component unmount
    return () => {
      if (currentLoader) {
        observer.unobserve(currentLoader);
      }
    };
  }, [hasMore, loading]);

  return (
    <div>
      <h1>Infinite Scroll with Pagination</h1>
      <ul>
        {items.map((item) => (
          <li key={item.id}>
            <strong>{item.id}:</strong> {item.title}
          </li>
        ))}
      </ul>
      {loading && <p>Loading more items...</p>}
      {!hasMore && <p>No more items to load.</p>}
      <div ref={loaderRef} style={{ height: '20px' }} />
    </div>
  );
};

export default InfiniteScrollWithPagination;



